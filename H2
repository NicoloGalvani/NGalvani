# -*- coding: utf-8 -*-
"""
Created on Sun Mar 22 12:39:08 2020

@author: Nicol√≤
"""

import numpy as np

#Atom1: 0.0,0.0,0.0; mass 1; 1 electron
#Atom2: 1.0,0.0,0.0; mass 1; 1 electron

#Energy precision per self consistent loop:
Precision = 1E-6

#INPUTS
Basis_per_atom = int(input("Basis per atom\n"))
N_Atoms = int(input("How many atoms?\n"))
alpha_list = input("Alpha values, divided by comma\n").split(',')
Alpha = np.array([float(i) for i in alpha_list])
#13.00773,1.962079,0.444529,0.1219492
Basis = Basis_per_atom*N_Atoms
R_n = np.arange(N_Atoms*3, dtype = float)
R_n = R_n.reshape(N_Atoms,3)
Z_n = np.arange(N_Atoms)
for i in range(N_Atoms):
    positions_list = (float(i),0.0,0.0)#input(("Atom {0} given as x,y,z\n").format(i)).split(',')
    R_n[i][:] = [float(i) for i in positions_list]
    Z_n[i] = int(input(("Atomic number {0} given as integer\n").format(i)))

#gaussian basis functions, as a (N_atoms, len(alpha)) array
def basis_function_set (electron, alpha, nuclei):
    distance_vector = (nuclei - electron)**2 #Same shape as nuclei
    distance_radial = np.sum(distance_vector,axis=1) #Sum of the squares
    distance = distance_radial.transpose() #Column vector (N_Atoms,)
    exponential = np.exp(-distance*alpha) #Array (N_Atoms,alpha)
    return exponential

#def denominator_al (alpha):
#    column_alpha = alpha.reshape(Basis_per_atom,1)
#    return column_alpha+alpha

def coefficient_al (alpha):
    coefficient = np.multiply.outer(alpha,alpha)/np.sum.outer(alpha,alpha)
    return coefficient

def K_matrix (alpha, nuclei):
    distance = (np.diff(nuclei, axis=0))**2
    distance_radial = np.sum(distance,axis=1)
    exponential = np.exp(-coefficient_al(alpha)*distance_radial)
    return exponential


####Problem here
def R_matrix (alpha, nuclei):
    first_term = alpha*np.array([[nuclei[0,:]]])
    second_term = alpha*np.array([[nuclei[1,:]]])
    numerator = np.sum.outer(first_term,second_term)
    denominator = np.sum.outer(alpha,alpha)
    tensor = numerator/denominator
    return tensor

def S_matrix (alpha,nuclei):
    coefficient = (np.pi/np.sum.outer(alpha,alpha))**(3/2)
    k = K_matrix(alpha, nuclei)
    matrix = coefficient*k
    return matrix

def T_matrix (alpha, nuclei):
    coefficient = coefficient_al(alpha)
    r = R_matrix(Alpha, R_n)
    t = np.zeros([Basis_per_atom,Basis_per_atom])
    for p in range (Basis_per_atom):
        for q in range (p):
            difference = r[p,:,:]-r[q,:,:]
            square = difference**2
            t[p,q] = square.sum()
            t[q,p] = t[p,q]
    kinetic = coefficient*(6-4*coefficient*t)*S_matrix(alpha,nuclei)
    return kinetic

def V_matrix (alpha):
    denominator = np.sum.outer(alpha,alpha)
    V = -2*np.pi/denominator
    return V

def erf(x):
    return x

def Q_matrix (alpha, nuclei):
    s = S_matrix(alpha, nuclei)
    S_product = np.multiply.outer(s,s)
    r = R_matrix(alpha, nuclei)
    R_diff = np.subtract.outer(r,r)
    R_absolute = np.linalg.norm(R_diff,axis=(2,5))
    alpha_sum = np.sum.outer(alpha,alpha)
    numerator = np.multiply.outer(alpha_sum,alpha_sum)
    denominator = np.sum.outer(alpha_sum,alpha_sum)
    argument = ((numerator/denominator)**(0.5))*R_absolute
    Q = S_product/R_absolute*erf(argument)
    return Q

#Checks
e1 = np.array([1.0,2.0,0.0])
b = basis_function_set (e1,Alpha,R_n)
k = K_matrix(Alpha, R_n)
r = R_matrix(Alpha, R_n)


#After each iteratin of the SCF loop it prints the
#8 Eigenvalues e_k



#Print the energy file
